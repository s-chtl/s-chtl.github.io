<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FHE | Sylvain Chatel</title>
    <link>https://example.com/tag/fhe/</link>
      <atom:link href="https://example.com/tag/fhe/index.xml" rel="self" type="application/rss+xml" />
    <description>FHE</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 28 Feb 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>FHE</title>
      <link>https://example.com/tag/fhe/</link>
    </image>
    
    <item>
      <title>HELIUM Project</title>
      <link>https://example.com/project/helium/</link>
      <pubDate>Wed, 28 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://example.com/project/helium/</guid>
      <description>&lt;p&gt;We introduce Helium, a novel framework that supports scalable secure multiparty computation (MPC) for lightweight participants and tolerates churn.
Helium relies on multiparty homomorphic encryption (MHE) as its core building block.
While MHE schemes have been well studied in theory, prior works fall short of addressing critical considerations paramount for adoption such as supporting resource-constrained and unstably connected participants.
In this work, we systematize the requirements of MHE-based MPC protocols from a practical lens, and we propose a novel execution mechanism that addresses those considerations.
We implement this execution mechanism in Helium, which makes it the first implemented framework to support MPC under network churn based solely on cryptographic assumptions.
We show that a Helium network of 30 parties connected with 100Mbits/s links and experiencing a system-wide churn rate of 40 failures per minute can compute the product between a fixed 512x512 secret matrix (e.g., a collectively-trained private model) and a fresh secret vector (e.g., a feature vector) 8.3 times per second.
This is ~1500 times faster than a state-of-the-art MPC framework operating under no churn.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PELTA Project</title>
      <link>https://example.com/project/pelta/</link>
      <pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/project/pelta/</guid>
      <description>&lt;p&gt;Multiparty fully homomorphic encryption (MFHE) schemes enable multiple parties to efficiently compute functions on their sensitive data while retaining confidentiality. However, existing MFHE schemes guarantee data confidentiality and the correctness of the computation result only against honest-but-curious adversaries. In this work, we provide the first practical construction that enables the verification of MFHE operations in zero-knowledge, protecting MFHE from malicious adversaries. Our solution relies on a combination of lattice-based commitment schemes and proof systems which we adapt to support both modern FHE schemes and their implementation optimizations. We implement our construction in PELTA. Our experimental evaluation shows that PELTA is one to two orders of magnitude faster than existing techniques in the literature.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VERITAS Project</title>
      <link>https://example.com/project/veritas/</link>
      <pubDate>Thu, 28 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/project/veritas/</guid>
      <description>&lt;p&gt;Homomorphic encryption schemes enable computations to be executed directly on ciphertexts without knowledge of the secret key, hence they are becoming an auspicious solution to protecting confidentiality in cloud computing. However, clients do not obtain any guarantees about the correctness of the computations performed by the cloud. We propose to explore how Verifiable Computing and Proof Systems can be combined with homomorphic encryption. Our end goal is to provide an open-source system that could be use off-the-shelf in existing homomorphic pipelines.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
